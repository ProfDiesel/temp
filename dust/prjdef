#!/usr/bin/env genjutsu
# vim: set filetype=python

from genjutsu import Apply, Default, Alias, env, main, Prjdef
from genjutsu_toolsets.c import Cxx, SharedObject, Executable, IncludeDir, CxxDef, Pch
from genjutsu_toolsets.filesystem import Copy
from precompiled_header_generator import GeneratedPch
from Ã¾irdparty import ThirdParty

thirdparties = {thirdparty:
    ThirdParty(thirdparty)
    for thirdparty in (
        'asio_nortti',
        'boost_nortti',
        'doctest',
        'fmt',
        'frozen_nortti',
        'gsl',
        'leaf_nortti_nothreads',
        'observer-ptr-lite',
        'rangeless',
        'robin_hood',
        'stdfunc_nortti',
        'ut',
    )
}

boilerplate = Prjdef('../boilerplate')
feed = Prjdef('../feed')

Apply(
    IncludeDir('include'),
    CxxDef('__USE_PRECOMPILED_HEADER__'),
    boilerplate.FLAGS,
    feed.FLAGS,
    (thirdparty.FLAGS for thirdparty in thirdparties.values()),
)

Apply(CxxDef('LINUX'))
Apply(CxxDef('LEAN_AND_MEAN'))

Apply(CxxDef('LOGGER_FMT_COMPILE'))
Apply(CxxDef('LOGGER_SYSLOG_FORMAT'))
# Apply(CxxDef('BOOST_SPIRIT_X3_DEBUG'))

#pch = GeneratedPch('precompiled_header', sources=('src/main.cpp',), pch_gen_project=Prjdef('../../precompiled_header_generator'))
pch = GeneratedPch('precompiled_header', sources=('src/main.cpp',))
#pch = Pch('precompiled_header')

Copy(
    Cxx('src/feed/feed.hpp', pch=pch, preprocess_only=True),
    'preprocessed/feed/feed.hpp',
)

Default(Alias('dust', (Executable('dust', objects=(Cxx('src/main.cpp', pch=pch),)),)))

with env():
    onload = ThirdParty('openonload')
    Apply(CxxDef('USE_TCPDIRECT'), onload.FLAGS)
    Copy(preprocessed := Cxx('src/main.cpp', name='main_tcpdirect', pch=pch, preprocess_only=True), 'preprocessed/main.i') # to be used by clang dump-record-layouts
    Copy(compiled_ := Cxx(preprocessed, pch=pch, compile_only=True, quick_build_alias=None), 'preprocessed/main.s') # to be used by llvm-mca
    Alias('dust_onload', (Executable('dust_onload', objects=(compiled_, onload.ARCHIVES)),))

with env():
    Apply(CxxDef('USE_LIBVMA'), ThirdParty('libvma').FLAGS)
    Alias('dust_vma', (Executable('dust_vma', objects=(Cxx('src/main.cpp', name='main_vma', pch=pch),)),))

with env():
    Apply(CxxDef('USE_RECVMMSG'))
    Alias('dust_recvmmsg', (Executable('dust_recvmmsg', objects=(Cxx('src/main.cpp', name='main_recvmmsg', pch=pch),)),))

with env('benchmark'):
    Apply(ThirdParty('benchmark').FLAGS)

    with env('integration'):
        Apply(IncludeDir('src'))
        traversal_benchmark_exe = Executable(
            'traversal_benchmark', objects=(Cxx('traversal.cpp', pch=pch),)
        )

    with env('unit'):
        Apply(IncludeDir('src'))
        string_dispatch_benchmark_exe = Executable(
            'string_dispatch_benchmark', objects=(Cxx('string_dispatch.cpp', pch=pch),)
        )

Alias('benchmark', (traversal_benchmark_exe, string_dispatch_benchmark_exe))

with env('test/unit'):
    Apply(IncludeDir('src'))
    test_exe = Executable('tests', objects=(Cxx('starter.cpp', pch=pch),))

with env('test/properties'):
    Apply(IncludeDir('src'), CxxDef('BACKTEST_HARNESS'))
    config_properties_fuzzable_exe = Executable(
        'config_properties', objects=(Cxx('config_properties.cpp', pch=pch),)
    )
    fuzzable_exe = Executable('fuzzable', objects=(Cxx('fuzzed.cpp', pch=pch),))

Alias('test', (test_exe, fuzzable_exe))
