# vim: set filetype=python
thirdparties = tuple(
    ThirdParty(thirdparty)
    for thirdparty in (
        'asio_nortti',
        'boost_nortti',
        'doctest',
        'fmt',
        'frozen_nortti',
        'gsl',
        'leaf_nortti_nothreads',
        'observer-ptr-lite',
        'outcome',
        'rangeless',
        'robin_hood',
        'stdfunc_nortti',
        'ut',
    )
)
Apply(
    IncludeDir('include'),
    CxxDef('__USE_PRECOMPILED_HEADER__'),
    (thirdparty.FLAGS for thirdparty in thirdparties),
)

Apply(CxxDef('LINUX'))

Apply(CxxDef('LEAN_AND_MEAN'))
Apply(CxxDef('LOGGER_FMT_COMPILE'))
# Apply(CxxDef('BOOST_SPIRIT_X3_DEBUG'))

# pch = GeneratedPch('precompiled_header', sources=('src/main.cpp',), pch_gen_project=Prjdef('../precompiled_header_generator'))
pch = Pch('precompiled_header')

Copy(
    Cxx('src/feed/feed.hpp', pch=pch, preprocess_only=True),
    'preprocessed/feed/feed.hpp',
)
Copy(Cxx('src/main.cpp', pch=pch, preprocess_only=True), 'preprocessed/main.i')
Copy(Cxx('src/main.cpp', pch=pch, compile_only=True), 'preprocessed/main.s')
main_exe = Executable('ppf', objects=(Cxx('src/main.cpp', pch=pch),))

Default(main_exe)

with env('benchmark'):
    Apply(ThirdParty('benchmark').FLAGS)

    with env('integration'):
        Apply(IncludeDir('src'))
        traversal_benchmark_exe = Executable(
            'traversal_benchmark', objects=(Cxx('traversal.cpp', pch=pch),)
        )

    with env('unit'):
        Apply(IncludeDir('src'))
        string_dispatch_benchmark_exe = Executable(
            'string_dispatch_benchmark', objects=(Cxx('string_dispatch.cpp', pch=pch),)
        )

# Alias('benchmark', (traversal_benchmark_exe, string_dispatch_benchmark_exe))
Alias('benchmark', (traversal_benchmark_exe,))

with env('contrib/production/smartbulb'):
    smartbulb_lib = SharedObject(
        'smartbulb', objects=(Cxx('smartbulb.cpp', pch=pch, pic=True),)
    )

with env('contrib/production/mlockall'):
    mlockall_lib = SharedObject(
        'mlockall', objects=(Cxx('mlockall.cpp', pch=pch, pic=True),)
    )

with env('contrib/production/tsc_calibrate'):
    tsc_calibrate_exe = Executable(
        'tsc_calibrate', objects=(Cxx('tsc_calibrate.cpp', pch=pch),)
    )

with env('contrib/notebook'):
    Apply(IncludeDir('src'))
    trigger_helper_lib = SharedObject(
        'trigger_helper', objects=(Cxx('trigger_helper.cpp', pch=pch, pic=True),)
    )
    trigger_helper_test = Executable(
        'trigger_helper_test',
        objects=(Cxx('trigger_helper.cpp', name='trigger_helper_test', pch=pch, flags=(CxxDef('TEST'),), quick_build_alias=None),)
    )

Alias('contrib', (smartbulb_lib, mlockall_lib, trigger_helper_lib, trigger_helper_test, tsc_calibrate_exe))

with env('test/integration'):
    Apply(IncludeDir('src'))
    up_lib = SharedObject('up', objects=(Cxx('up.cpp', pch=pch, pic=True),))
    up_test_exe = Executable(
        'up_test', objects=(Cxx('up.cpp', name='up_test', pch=pch, flags=(CxxDef('TEST'),), quick_build_alias=None),)
    )

with env('test/unit'):
    Apply(IncludeDir('src'))
    test_exe = Executable('tests', objects=(Cxx('starter.cpp', pch=pch),))

with env('test/properties'):
    Apply(IncludeDir('src'), CxxDef('BACKTEST_HARNESS'), CxxDef('SAFE_LQ2'))
    config_properties_fuzzable_exe = Executable(
        'config_properties', objects=(Cxx('config_properties.cpp', pch=pch),)
    )
    fuzzable_exe = Executable('fuzzable', objects=(Cxx('fuzzed.cpp', pch=pch),))

Alias('test', (test_exe, fuzzable_exe, up_lib, up_test_exe))


with env('playground'):
    writev = Executable('writev', objects=(Cxx('writev.cpp', pch=pch),))

Alias('playground', (writev,))
