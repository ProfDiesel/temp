#!/usr/bin/env genjutsu
# vim: set filetype=python

from itertools import chain
from pathlib import Path

from genjutsu_toolsets.c import Cxx, Executable, IncludeDir, CxxDef, SharedObject
from genjutsu_toolsets.filesystem import Copy
from precompiled_header_generator import GeneratedPch
from Ã¾irdparty import ThirdParty

thirdparties = {thirdparty:
    ThirdParty(thirdparty)
    for thirdparty in (
        'asio_nortti',
        'boost_nortti',
        'fmt',
        'leaf_nortti_nothreads',
        'range-v3',
        'stdfunc_nortti',
        'ut',
    )
}

boilerplate = Prjdef('../boilerplate')

FLAGS = (
    IncludeDir(Path(__file__).parent / 'include'),
    CxxDef('__USE_PRECOMPILED_HEADER__'),
    boilerplate.FLAGS,
    *(chain.from_iterable(thirdparty.FLAGS for thirdparty in thirdparties.values()))
)

Apply(FLAGS)

Apply(CxxDef('LINUX'))

Apply(CxxDef('LEAN_AND_MEAN'))
Apply(CxxDef('LOGGER_FMT_COMPILE'))
Apply(CxxDef('LOGGER_SYSLOG_FORMAT'))

pch = GeneratedPch('precompiled_header', sources=('src/feedlib.cpp',))

Copy(Cxx('include/feed/feed.hpp', preprocess_only=True), 'preprocessed/feed/feed.hpp')

Default(Alias('feedlib', feedlib := (SharedObject('feedlib', objects=(Cxx('src/feedlib.cpp', pch=pch, pic=True),)),)))

with env():
    Apply(CxxDef('SPARSE_INSTRUMENT_STATE'))
    Alias('feedlib_sparse', feedlib := (SharedObject('feedlib_sparse', objects=(Cxx('src/feedlib.cpp', name='feedlib_sparse', pch=pch, pic=True),)),))

Alias('test', (Executable('test_main', objects=(Cxx('test/main.cpp', pic=True),)),))
